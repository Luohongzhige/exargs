name: Build and Publish to TestPyPI

on:
  push:
    tags:
      - "v*"

permissions:
  contents: write

jobs:
  build-and-publish:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout source
        uses: actions/checkout@v3

      - name: Extract version from pyproject.toml
        id: version
        run: |
          version=$(grep '^version *= *' pyproject.toml | sed -E 's/version *= *"([^"]+)"/\1/')
          echo "version=$version" >> "$GITHUB_OUTPUT"

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      - name: Install build tools
        run: |
          python -m pip install --upgrade pip
          pip install build twine

      - name: Build distribution
        run: |
          rm -rf dist/
          python -m build

      - name: Upload to TestPyPI
        run: twine upload --repository-url https://test.pypi.org/legacy/ dist/*
        env:
          TWINE_USERNAME: __token__
          TWINE_PASSWORD: ${{ secrets.TEST_PYPI_TOKEN }}

      - name: Retry install from TestPyPI until expected version
        run: |
          set -e
          EXPECTED_VERSION="${{ steps.version.outputs.version }}"
          echo "Expecting version: $EXPECTED_VERSION"

          for i in {1..5}; do
            echo "Attempt $i to install exargs..."
            pip uninstall -y exargs || true
            pip install --no-cache-dir -i https://test.pypi.org/simple/ exargs

            INSTALLED_VERSION=$(pip show exargs | grep ^Version: | cut -d' ' -f2)
            echo "Installed version: $INSTALLED_VERSION"

            if [[ "$INSTALLED_VERSION" == "$EXPECTED_VERSION" ]]; then
              echo "Version match!"
              break
            fi

            echo "Waiting 15 seconds..."
            sleep 15
          done

          FINAL_VERSION=$(pip show exargs | grep ^Version: | cut -d' ' -f2)
          if [[ "$FINAL_VERSION" != "$EXPECTED_VERSION" ]]; then
            echo "Version mismatch after retries."
            exit 1
          fi

      - name: Run unit tests
        run: python -m unittest discover -s test
